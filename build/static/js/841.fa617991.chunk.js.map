{"version":3,"file":"static/js/841.fa617991.chunk.js","mappings":"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","sources":["service/AdminService/AdminDashboardService.js","webpack://create-company/./src/pages/Admin/Dashboard/styles.module.scss?6936","pages/Admin/Dashboard/index.js"],"sourcesContent":["import axios from \"src/config/axios\";\r\n\r\nconst api_path = {\r\n  getLogs: \"/admin/logs\",\r\n  testPayment: \"/payment\",\r\n};\r\n\r\nconst AdminDashboardService = {\r\n  getLogs: () => {\r\n    return axios.get(api_path.getLogs);\r\n  },\r\n  testPayment: (params) => {\r\n    return axios.post(api_path.testPayment, params);\r\n  },\r\n};\r\n\r\nexport default AdminDashboardService;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"ant-table-scroll-horizontal\":\"styles_ant-table-scroll-horizontal__ZQ1WD\",\"ant-table-container\":\"styles_ant-table-container__BwP34\",\"ant-table-content\":\"styles_ant-table-content__RgNNr\",\"cc-card\":\"styles_cc-card__w48SL\",\"ant-card-head\":\"styles_ant-card-head__Ib869\",\"ant-card-head-wrapper\":\"styles_ant-card-head-wrapper__kZJp1\",\"ant-card-head-title\":\"styles_ant-card-head-title__sf3Ev\",\"ant-card-body\":\"styles_ant-card-body__f1dRU\",\"ant-layout-footer\":\"styles_ant-layout-footer__kb6ZK\",\"ant-form-item-control-input-content\":\"styles_ant-form-item-control-input-content__Yk7W4\",\"ant-picker\":\"styles_ant-picker__VW1EU\",\"ant-select-selector\":\"styles_ant-select-selector__N-1G5\",\"site-layout-background\":\"styles_site-layout-background__a3L9k\",\"spin-suspense\":\"styles_spin-suspense__tl4T1\",\"inline\":\"styles_inline__cOX8i\",\"cc-scroll\":\"styles_cc-scroll__UZhUA\",\"ava\":\"styles_ava__IImx+\",\"list\":\"styles_list__v7JzL\",\"tabs\":\"styles_tabs__yr-jp\"};","import React, { useState, useEffect, forwardRef } from 'react';\r\nimport { List, Row, Skeleton, Avatar, Col, Card, message, Button, Tabs } from 'antd';\r\nimport AdminDashboardService from 'src/service/AdminService/AdminDashboardService';\r\nimport { GrStatusWarning } from 'react-icons/gr';\r\nimport VirtualList from 'rc-virtual-list';\r\nimport styles from './styles.module.scss';\r\nimport clsx from 'clsx';\r\n\r\nconst { TabPane } = Tabs;\r\nconst AdminDashboard = () => {\r\n  const [logs, setLogs] = useState([]);\r\n  const [orderPayment, setOrderPayment] = useState([]);\r\n  const [orderLatest, setOrderLatest] = useState([]);\r\n\r\n  const [data, setData] = useState([]);\r\n  const [output, setOutput] = useState([]);\r\n  const [containerHeight, setContainerHeight] = useState(100);\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n    getScreenData();\r\n    layoutEffection();\r\n  }, []);\r\n  const layoutEffection = () => {\r\n    let siteLayout = document.querySelector('.site-layout-background');\r\n\r\n    let { height } = siteLayout.getBoundingClientRect();\r\n\r\n    setContainerHeight(height - 156);\r\n  };\r\n  const getScreenData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      let { data } = await AdminDashboardService.getLogs();\r\n\r\n      let { _logs, output, error } = data.data;\r\n\r\n      setLogs((state) => ({\r\n        ...state,\r\n        _logs,\r\n        output,\r\n        error,\r\n      }));\r\n      setData(_logs.slice(0, 20));\r\n      setOutput(output.slice(0, 20));\r\n    } catch (err) {\r\n      let msg = 'Đã có lỗi xảy ra, vui lòng thử lại sau';\r\n      message.error(msg);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // const testPayment = () => {\r\n  //   const date = new Date();\r\n  //   var createDate = Date.parse(date).toString('yyyyMMddHHmmss');\r\n  //   var orderId = Date.parse(date).toString('HHmmss');\r\n  //   let params = {};\r\n  //   params.createDate = createDate;\r\n  //   params.orderId = orderId;\r\n  //   params.amount = 100000 * 100;\r\n  //   params.orderInfo = '6298edcfe6214c530533b255';\r\n  //   AdminDashboardService.testPayment(params)\r\n  //     .then((res) => {\r\n  //       if (res.data.status === 200) {\r\n  //         return (window.location.href = res.data.url);\r\n  //       }\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(err);\r\n  //     });\r\n  // };\r\n  // const ContainerHeight = 400;\r\n\r\n  const onScroll = (e, type) => {\r\n    if (e.currentTarget.scrollHeight - e.currentTarget.scrollTop === containerHeight) {\r\n      if (type === 1) appendData();\r\n      else if (type === 2) appendOutputData();\r\n    }\r\n  };\r\n  const appendData = () => {\r\n    let length = data.length;\r\n    let newData = data;\r\n    newData = [...newData, ...logs._logs?.slice(length, length + 20)];\r\n    setData(newData);\r\n  };\r\n\r\n  const appendOutputData = () => {\r\n    let length = output.length;\r\n    let newData = output;\r\n    newData = [...newData, ...logs.output?.slice(length, length + 20)];\r\n    setOutput(newData);\r\n  };\r\n  return (\r\n    <Row gutter={[16, 12]}>\r\n      <Col span={16}>\r\n        <Card title=\"Logs hệ thống\">\r\n          <Tabs\r\n            // onTabClick={onTabClick}\r\n            defaultActiveKey=\"1\"\r\n            destroyInactiveTabPane\r\n            className={clsx([styles.tabs, 'cc-card'])}\r\n            animated={{ inkBar: true, tabPane: true }}\r\n          >\r\n            <TabPane tab=\"Truy cập\" key=\"1\">\r\n              {/* <List\r\n                className={clsx([styles.list, 'demo-loadmore-list'])}\r\n                loading={loading}\r\n                itemLayout=\"horizontal\"\r\n                dataSource={logs._logs}\r\n                renderItem={(item) => (\r\n                  <List.Item actions={[]} className={clsx([styles.listItem])}>\r\n                    <Skeleton avatar title={false} loading={loading} active>\r\n                      <List.Item.Meta\r\n                        avatar={\r\n                          <Avatar\r\n                            className={clsx([styles.ava])}\r\n                            size={{ xs: 12, sm: 18, md: 24, lg: 30, xl: 36, xxl: 42 }}\r\n                            icon={<GrStatusWarning />}\r\n                          />\r\n                        }\r\n                        title={new Date(item?.createdAt).toString('dd/MM/yyyy HH:mm')}\r\n                        description={<span style={{ wordBreak: 'break-word' }}>{JSON.stringify(item.error)}</span>}\r\n                      />\r\n                    </Skeleton>\r\n                  </List.Item>\r\n                )}\r\n              /> */}\r\n              <List loading={loading}>\r\n                <VirtualList\r\n                  data={data}\r\n                  height={containerHeight}\r\n                  itemHeight={50}\r\n                  itemKey=\"Truy cập\"\r\n                  onScroll={(e) => onScroll(e, 1)}\r\n                >\r\n                  {(item, i) => (\r\n                    <List.Item key={`Truy cập ${i}`}>\r\n                      <List.Item.Meta\r\n                        avatar={\r\n                          <Avatar\r\n                            className={clsx([styles.ava])}\r\n                            size={{ xs: 12, sm: 18, md: 24, lg: 30, xl: 36, xxl: 42 }}\r\n                            icon={<GrStatusWarning />}\r\n                          />\r\n                        }\r\n                        title={new Date(item?.createdAt).toString('dd/MM/yyyy HH:mm')}\r\n                        description={\r\n                          <span style={{ wordBreak: 'break-word' }}>\r\n                            <pre style={{ wordBreak: 'break-word', whiteSpace: 'pre-wrap' }}>\r\n                              {JSON.stringify(item.error, undefined, 1)}\r\n                            </pre>\r\n                          </span>\r\n                        }\r\n                      />\r\n                    </List.Item>\r\n                  )}\r\n                </VirtualList>\r\n              </List>\r\n            </TabPane>\r\n            <TabPane tab=\"Hệ thống\" key=\"2\">\r\n              {/* <List\r\n                className={clsx([styles.list, 'demo-loadmore-list'])}\r\n                // loading={loading}\r\n                itemLayout=\"horizontal\"\r\n                dataSource={logs.output}\r\n                renderItem={(item) => (\r\n                  <List.Item actions={[]} className={clsx([styles.listItem])}>\r\n                    <Skeleton avatar title={false} loading={loading} active>\r\n                      <List.Item.Meta\r\n                        avatar={\r\n                          <Avatar\r\n                            className={clsx([styles.ava])}\r\n                            size={{ xs: 12, sm: 18, md: 24, lg: 30, xl: 36, xxl: 42 }}\r\n                            icon={<GrStatusWarning />}\r\n                          />\r\n                        }\r\n                        title={item.slice(0, 28)}\r\n                        description={<span style={{ wordBreak: 'break-word' }}>{item.slice(29)}</span>}\r\n                      />\r\n                    </Skeleton>\r\n                  </List.Item>\r\n                )}\r\n              /> */}\r\n              <List loading={loading}>\r\n                <VirtualList\r\n                  data={output}\r\n                  height={containerHeight}\r\n                  itemHeight={50}\r\n                  itemKey=\"Hệ thống\"\r\n                  onScroll={(e) => onScroll(e, 2)}\r\n                >\r\n                  {(item, i) => (\r\n                    <List.Item key={`Hệ thống ${item.slice(0, 28)} ${i}`}>\r\n                      <List.Item.Meta\r\n                        avatar={\r\n                          <Avatar\r\n                            className={clsx([styles.ava])}\r\n                            size={{ xs: 12, sm: 18, md: 24, lg: 30, xl: 36, xxl: 42 }}\r\n                            icon={<GrStatusWarning />}\r\n                          />\r\n                        }\r\n                        title={item?.slice(0, 28)}\r\n                        description={\r\n                          <span style={{ wordBreak: 'break-word' }}>\r\n                            {/* {item?.slice(29)} */}\r\n                            <pre style={{ wordBreak: 'break-word', whiteSpace: 'pre-wrap' }}>{item?.slice(29)}</pre>\r\n                          </span>\r\n                        }\r\n                      />\r\n                    </List.Item>\r\n                  )}\r\n                </VirtualList>\r\n              </List>\r\n            </TabPane>\r\n          </Tabs>\r\n        </Card>\r\n      </Col>\r\n      <Col span={8}>\r\n        <Row gutter={[16, 12]}>\r\n          <Col span={24}>\r\n            <Card title=\"Đơn hàng đã thanh toán\">\r\n              <List\r\n                className=\"demo-loadmore-list\"\r\n                // loading={loading}\r\n                itemLayout=\"horizontal\"\r\n                dataSource={orderPayment}\r\n                renderItem={(item) => (\r\n                  <List.Item actions={[]}>\r\n                    <Skeleton avatar title={false} loading={item.loading} active>\r\n                      <List.Item.Meta\r\n                        avatar={<Avatar src={item.picture.large} />}\r\n                        title={item.name?.last}\r\n                        description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\r\n                      />\r\n                      <div>content</div>\r\n                    </Skeleton>\r\n                  </List.Item>\r\n                )}\r\n              />\r\n            </Card>\r\n          </Col>\r\n          <Col span={24}>\r\n            <Card title=\"Đơn hàng vừa tạo\">\r\n              <List\r\n                className=\"demo-loadmore-list\"\r\n                // loading={loading}\r\n                itemLayout=\"horizontal\"\r\n                dataSource={orderLatest}\r\n                renderItem={(item) => (\r\n                  <List.Item actions={[]}>\r\n                    <Skeleton avatar title={false} loading={item.loading} active>\r\n                      <List.Item.Meta\r\n                        avatar={<Avatar src={item.picture.large} />}\r\n                        title={item.name?.last}\r\n                        description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\r\n                      />\r\n                      <div>content</div>\r\n                    </Skeleton>\r\n                  </List.Item>\r\n                )}\r\n              />\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n"],"names":["api_path","getLogs","axios","testPayment","params","TabPane","Tabs","useState","logs","setLogs","orderPayment","orderLatest","data","setData","output","setOutput","containerHeight","setContainerHeight","loading","setLoading","useEffect","getScreenData","layoutEffection","height","document","querySelector","getBoundingClientRect","AdminDashboardService","_logs","error","state","slice","message","onScroll","e","type","currentTarget","scrollHeight","scrollTop","appendData","appendOutputData","length","newData","gutter","span","title","defaultActiveKey","destroyInactiveTabPane","className","clsx","styles","animated","inkBar","tabPane","tab","itemHeight","itemKey","item","i","avatar","size","xs","sm","md","lg","xl","xxl","icon","Date","createdAt","toString","description","style","wordBreak","whiteSpace","JSON","stringify","undefined","itemLayout","dataSource","renderItem","actions","active","src","picture","large","name","last"],"sourceRoot":""}