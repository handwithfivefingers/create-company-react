{"version":3,"file":"static/js/841.c1ea2cfc.chunk.js","mappings":"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","sources":["service/AdminService/AdminDashboardService.js","webpack://create-company/./src/pages/Admin/Dashboard/styles.module.scss?6936","pages/Admin/Dashboard/index.js"],"sourcesContent":["import axios from \"src/config/axios\";\n\nconst api_path = {\n  getLogs: \"/admin/logs\",\n  testPayment: \"/payment\",\n};\n\nconst AdminDashboardService = {\n  getLogs: () => {\n    return axios.get(api_path.getLogs);\n  },\n  testPayment: (params) => {\n    return axios.post(api_path.testPayment, params);\n  },\n};\n\nexport default AdminDashboardService;\n","// extracted by mini-css-extract-plugin\nexport default {\"ava\":\"styles_ava__0yFyk\",\"list\":\"styles_list__tK8jc\"};","import React, { useState, useEffect } from 'react';\r\nimport { List, Row, Skeleton, Avatar, Col, Card, message, Button } from 'antd';\r\nimport AdminDashboardService from 'src/service/AdminService/AdminDashboardService';\r\nimport { GrStatusWarning } from 'react-icons/gr';\r\nimport styles from './styles.module.scss';\r\nimport clsx from 'clsx';\r\nconst AdminDashboard = () => {\r\n  const [logs, setLogs] = useState([]);\r\n  const [orderPayment, setOrderPayment] = useState([]);\r\n  const [orderLatest, setOrderLatest] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  useEffect(() => {\r\n    getScreenData();\r\n  }, []);\r\n\r\n  const getScreenData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      let { data } = await AdminDashboardService.getLogs();\r\n      if (data) setLogs(data?.data);\r\n    } catch (err) {\r\n      let msg = 'Đã có lỗi xảy ra, vui lòng thử lại sau';\r\n      message.error(msg);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // const testPayment = () => {\r\n  //   const date = new Date();\r\n  //   var createDate = Date.parse(date).toString('yyyyMMddHHmmss');\r\n  //   var orderId = Date.parse(date).toString('HHmmss');\r\n  //   let params = {};\r\n  //   params.createDate = createDate;\r\n  //   params.orderId = orderId;\r\n  //   params.amount = 100000 * 100;\r\n  //   params.orderInfo = '6298edcfe6214c530533b255';\r\n  //   AdminDashboardService.testPayment(params)\r\n  //     .then((res) => {\r\n  //       if (res.data.status === 200) {\r\n  //         return (window.location.href = res.data.url);\r\n  //       }\r\n  //     })\r\n  //     .catch((err) => {\r\n  //       console.log(err);\r\n  //     });\r\n  // };\r\n\r\n  return (\r\n    <Row gutter={[16, 12]}>\r\n      <Col span={16}>\r\n        <Card title=\"Logs hệ thống\" className=\"cc-card\">\r\n          <List\r\n            className={clsx([styles.list, 'demo-loadmore-list'])}\r\n            // loading={loading}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={logs}\r\n            renderItem={(item) => (\r\n              <List.Item actions={[]} className={clsx([styles.listItem])}>\r\n                <Skeleton avatar title={false} loading={loading} active>\r\n                  <List.Item.Meta\r\n                    avatar={\r\n                      <Avatar\r\n                        className={clsx([styles.ava])}\r\n                        size={{ xs: 12, sm: 18, md: 24, lg: 30, xl: 36, xxl: 42 }}\r\n                        icon={<GrStatusWarning />}\r\n                      />\r\n                    }\r\n                    title={new Date(item?.createdAt).toString('dd/MM/yyyy HH:mm')}\r\n                    description={<span style={{wordBreak:'break-word'}}>{JSON.stringify(item.error)}</span>}\r\n                  />\r\n                  {/* <div>Status: {item.error?.status} </div> */}\r\n                </Skeleton>\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </Card>\r\n      </Col>\r\n      <Col span={8}>\r\n        <Card title=\"Đơn hàng đã thanh toán\">\r\n          <List\r\n            className=\"demo-loadmore-list\"\r\n            // loading={loading}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={orderPayment}\r\n            renderItem={(item) => (\r\n              <List.Item actions={[]}>\r\n                <Skeleton avatar title={false} loading={item.loading} active>\r\n                  <List.Item.Meta\r\n                    avatar={<Avatar src={item.picture.large} />}\r\n                    title={item.name?.last}\r\n                    description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\r\n                  />\r\n                  <div>content</div>\r\n                </Skeleton>\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </Card>\r\n        <Card title=\"Đơn hàng vừa tạo\">\r\n          <List\r\n            className=\"demo-loadmore-list\"\r\n            // loading={loading}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={orderLatest}\r\n            renderItem={(item) => (\r\n              <List.Item actions={[]}>\r\n                <Skeleton avatar title={false} loading={item.loading} active>\r\n                  <List.Item.Meta\r\n                    avatar={<Avatar src={item.picture.large} />}\r\n                    title={item.name?.last}\r\n                    description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\r\n                  />\r\n                  <div>content</div>\r\n                </Skeleton>\r\n              </List.Item>\r\n            )}\r\n          />\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default AdminDashboard;\r\n"],"names":["api_path","getLogs","axios","testPayment","params","useState","logs","setLogs","orderPayment","orderLatest","loading","setLoading","useEffect","getScreenData","AdminDashboardService","data","message","gutter","span","title","className","clsx","styles","itemLayout","dataSource","renderItem","item","actions","avatar","active","size","xs","sm","md","lg","xl","xxl","icon","Date","createdAt","toString","description","style","wordBreak","JSON","stringify","error","src","picture","large","name","last"],"sourceRoot":""}